// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dennigogo/zitadel/internal/eventstore/v1 (interfaces: Eventstore)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1 "github.com/dennigogo/zitadel/internal/eventstore/v1"
	models "github.com/dennigogo/zitadel/internal/eventstore/v1/models"
	gomock "github.com/golang/mock/gomock"
)

// MockEventstore is a mock of Eventstore interface.
type MockEventstore struct {
	ctrl     *gomock.Controller
	recorder *MockEventstoreMockRecorder
}

// MockEventstoreMockRecorder is the mock recorder for MockEventstore.
type MockEventstoreMockRecorder struct {
	mock *MockEventstore
}

// NewMockEventstore creates a new mock instance.
func NewMockEventstore(ctrl *gomock.Controller) *MockEventstore {
	mock := &MockEventstore{ctrl: ctrl}
	mock.recorder = &MockEventstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventstore) EXPECT() *MockEventstoreMockRecorder {
	return m.recorder
}

// FilterEvents mocks base method.
func (m *MockEventstore) FilterEvents(arg0 context.Context, arg1 *models.SearchQuery) ([]*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterEvents", arg0, arg1)
	ret0, _ := ret[0].([]*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterEvents indicates an expected call of FilterEvents.
func (mr *MockEventstoreMockRecorder) FilterEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterEvents", reflect.TypeOf((*MockEventstore)(nil).FilterEvents), arg0, arg1)
}

// Health mocks base method.
func (m *MockEventstore) Health(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockEventstoreMockRecorder) Health(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockEventstore)(nil).Health), arg0)
}

// Subscribe mocks base method.
func (m *MockEventstore) Subscribe(arg0 ...models.AggregateType) *v1.Subscription {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(*v1.Subscription)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockEventstoreMockRecorder) Subscribe(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEventstore)(nil).Subscribe), arg0...)
}
